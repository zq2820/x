// Code generated by cssGen. DO NOT EDIT.

package react

import "github.com/gopherjs/gopherjs/js"

// CSS defines CSS attributes for HTML components. Largely based on
// https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
//
type CSS struct {
	o *js.Object

	Float      string
	FontSize   string
	FontStyle  string
	FontWeight string
	Height     string
	Left       string
	Margin		 string
	MarginTop  string
	MaxHeight  string
	MinHeight  string
	Overflow   string
	OverflowY  string
	Position   string
	Resize     string
	Top        string
	Width      string
	ZIndex     string
}

// TODO: until we have a resolution on
// https://github.com/gopherjs/gopherjs/issues/236 we define hack() below

func (c *CSS) hack() *CSS {
	return Hack(c)
}

func Hack(c *CSS) *CSS {
	if c == nil {
		return nil
	}

	o := object.New()

	if c.Float != "" {
		o.Set("float", c.Float)
	}
	if c.FontSize != "" {
		o.Set("fontSize", c.FontSize)
	}
	if c.FontStyle != "" {
		o.Set("fontStyle", c.FontStyle)
	}
	if c.FontWeight != "" {
		o.Set("fontWeight", c.FontWeight)
	}
	if c.Height != "" {
		o.Set("height", c.Height)
	}
	if c.Left != "" {
		o.Set("left", c.Left)
	}
	if c.Margin != "" {
		o.Set("margin", c.Margin)
	}
	if c.MarginTop != "" {
		o.Set("marginTop", c.MarginTop)
	}
	if c.MaxHeight != "" {
		o.Set("maxHeight", c.MaxHeight)
	}
	if c.MinHeight != "" {
		o.Set("minHeight", c.MinHeight)
	}
	if c.Overflow != "" {
		o.Set("overflow", c.Overflow)
	}
	if c.OverflowY != "" {
		o.Set("overflowY", c.OverflowY)
	}
	if c.Position != "" {
		o.Set("position", c.Position)
	}
	if c.Resize != "" {
		o.Set("resize", c.Resize)
	}
	if c.Top != "" {
		o.Set("top", c.Top)
	}
	if c.Width != "" {
		o.Set("width", c.Width)
	}
	if c.ZIndex != "" {
		o.Set("zIndex", c.ZIndex)
	}

	return &CSS{o: o}
}